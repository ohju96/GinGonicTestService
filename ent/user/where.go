// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
	"user_service/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// ID applies equality check predicate on the "ID" field. It's identical to IDEQ.
func ID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, v))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserName, v))
}

// UserType applies equality check predicate on the "user_type" field. It's identical to UserTypeEQ.
func UserType(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// IDEQ applies the EQ predicate on the "ID" field.
func IDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, v))
}

// IDNEQ applies the NEQ predicate on the "ID" field.
func IDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, v))
}

// IDIn applies the In predicate on the "ID" field.
func IDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, vs...))
}

// IDNotIn applies the NotIn predicate on the "ID" field.
func IDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, vs...))
}

// IDGT applies the GT predicate on the "ID" field.
func IDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, v))
}

// IDGTE applies the GTE predicate on the "ID" field.
func IDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, v))
}

// IDLT applies the LT predicate on the "ID" field.
func IDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, v))
}

// IDLTE applies the LTE predicate on the "ID" field.
func IDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, v))
}

// IDEqualFold applies the EqualFold predicate on the "ID" field.
func IDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, v))
}

// IDContainsFold applies the ContainsFold predicate on the "ID" field.
func IDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUserName, v))
}

// UserTypeEQ applies the EQ predicate on the "user_type" field.
func UserTypeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserType, v))
}

// UserTypeNEQ applies the NEQ predicate on the "user_type" field.
func UserTypeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserType, v))
}

// UserTypeIn applies the In predicate on the "user_type" field.
func UserTypeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserType, vs...))
}

// UserTypeNotIn applies the NotIn predicate on the "user_type" field.
func UserTypeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserType, vs...))
}

// UserTypeGT applies the GT predicate on the "user_type" field.
func UserTypeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUserType, v))
}

// UserTypeGTE applies the GTE predicate on the "user_type" field.
func UserTypeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUserType, v))
}

// UserTypeLT applies the LT predicate on the "user_type" field.
func UserTypeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUserType, v))
}

// UserTypeLTE applies the LTE predicate on the "user_type" field.
func UserTypeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUserType, v))
}

// UserTypeContains applies the Contains predicate on the "user_type" field.
func UserTypeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUserType, v))
}

// UserTypeHasPrefix applies the HasPrefix predicate on the "user_type" field.
func UserTypeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUserType, v))
}

// UserTypeHasSuffix applies the HasSuffix predicate on the "user_type" field.
func UserTypeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUserType, v))
}

// UserTypeEqualFold applies the EqualFold predicate on the "user_type" field.
func UserTypeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUserType, v))
}

// UserTypeContainsFold applies the ContainsFold predicate on the "user_type" field.
func UserTypeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUserType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
